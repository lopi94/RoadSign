/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package roadsign;

import java.awt.Color;
import java.awt.Component;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import org.neuroph.core.NeuralNetwork;

/**
 *
 * @author Julia
 */
public class JFrameForm extends javax.swing.JFrame {

    private int[] columnMax;
    private int[] desiredColumn;
    
    /**
     * Creates new form JFrameForm
     */
    public JFrameForm() {
        initLogic();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabelInfo = new javax.swing.JLabel();
        jSpinnerLearningRate = new javax.swing.JSpinner();
        jSpinnerError = new javax.swing.JSpinner();
        jSpinnerIteration = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        jButtonReadData = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTableData = new javax.swing.JTable(recognizeDataModel){
            //  Returning the Class of each column will allow different
            //  renderers to be used based on Class
            public Class getColumnClass(int column)
            {
                return getValueAt(0, column).getClass();
            }
        };
        jTableData.setPreferredScrollableViewportSize(jTableData.getPreferredSize());
        jButtonTestAll = new javax.swing.JButton();
        jButtonTestOne = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableResults = new javax.swing.JTable(){
            @Override
            public Component prepareRenderer(TableCellRenderer renderer, int row, int col) {
                Component comp = super.prepareRenderer(renderer, row, col);
                comp.setBackground(Color.GRAY);
                if(columnMax != null)
                if(columnMax.length >= row)
                if(getSelectedRow() == row) {
                    if(col == columnMax[row]) {
                        comp.setBackground(Color.GREEN);
                    }
                }
                //        if(value != null && currentResult != null && correctRow != null)
                //        if(value.length == col && currentResult.length == row && correctRow.length == row)
                //        for(int i = 0; i < row; i++) {
                    //            for(int j = 0; j < col; j++) {
                        //                if(value[i][j] == currentResult[i][j] && i == correctRow[j]) {
                            //                    comp.setBackground(Color.green);
                            //                } else {
                            //                    if(value[i][j] == currentResult[i][j]) {
                                //                        comp.setBackground(Color.blue);
                                //                    }
                            //                    if(i == correctRow[j]) {
                                //                        comp.setBackground(Color.YELLOW);
                                //                    }
                            //                }
                        //            }
                    //        }

                //        /*   Object value = getModel().getValueAt(row, col);
                //        if (getSelectedRow() == row) {
                    //            if (value.equals(false)) {
                        //                comp.setBackground(Color.red);
                        //            } else if (value.equals(true)) {
                        //                comp.setBackground(Color.green);
                        //            } else {
                        //                comp.setBackground(Color.white);
                        //            }
                    //        } else {
                    //            comp.setBackground(Color.white);
                    //        }
                //        */
                return comp;
            }
        };
        jButtonClean = new javax.swing.JButton();
        jButtonReadRecognizeData = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabelResultOk = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabelResultErr = new javax.swing.JLabel();

        jFileChooser1.setApproveButtonText("Wczytaj");
        jFileChooser1.setApproveButtonToolTipText("");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(153, 255, 153));

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jLabel1.setText("Współczynnik uczenia: ");

        jLabel3.setText("Max liczba iteracji: ");

        jLabel4.setText("Max błąd sieci: ");

        SpinnerNumberModel modelLearningRate = new SpinnerNumberModel(0.5,0.0,1.0,0.01);
        modelLearningRate.setStepSize(0.01);
        jSpinnerLearningRate.setModel(modelLearningRate);

        SpinnerNumberModel modelError = new SpinnerNumberModel(0.5,0.0 ,1.0,0.01);
        modelError.setStepSize(0.01);
        jSpinnerError.setModel(modelError);

        SpinnerNumberModel modelIteration = new SpinnerNumberModel(10000,1,100000,1);
        modelIteration.setStepSize(1);
        jSpinnerIteration.setModel(modelIteration);

        jLabel6.setText("Informacje o sieci neuronowej: ");

        jButtonReadData.setText("Wczytaj dane");
        jButtonReadData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonReadDataMouseClicked(evt);
            }
        });
        jButtonReadData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReadDataActionPerformed(evt);
            }
        });

        jButton2.setText("Trenuj sieć");
        jButton2.setToolTipText("");
        jButton2.setActionCommand("buttonTrain");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabelInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(49, 49, 49))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSpinnerIteration, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                    .addComponent(jSpinnerError)
                    .addComponent(jSpinnerLearningRate))
                .addGap(113, 113, 113)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonReadData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(89, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jSpinnerLearningRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(20, 20, 20)
                                .addComponent(jLabel4))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jSpinnerIteration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(jSpinnerError, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(102, 102, 102)
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(jButtonReadData)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)))
                .addContainerGap(191, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Trenuj", jPanel1);

        jLabel10.setText("Zbiór testowy");

        jTableData.setModel(recognizeDataModel);
        jTableData.getColumnModel().getColumn(1).setCellRenderer(jTableData.getDefaultRenderer(ImageIcon.class));
        jTableData.setModel(recognizeDataModel);
        jScrollPane5.setViewportView(jTableData);

        jButtonTestAll.setText("Testuj całosć");
        jButtonTestAll.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonTestAllMouseClicked(evt);
            }
        });
        jButtonTestAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTestAllActionPerformed(evt);
            }
        });

        jButtonTestOne.setText("Testuj pojedynczy rekord");
        jButtonTestOne.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonTestOneMouseClicked(evt);
            }
        });
        jButtonTestOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTestOneActionPerformed(evt);
            }
        });

        jLabel5.setText("Wyniki");

        jTableResults.setBackground(new java.awt.Color(102, 102, 102));
        jTableResults.setModel(resultsModel);
        jScrollPane1.setViewportView(jTableResults);

        jButtonClean.setText("Wyczyść");
        jButtonClean.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonCleanMouseClicked(evt);
            }
        });
        jButtonClean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCleanActionPerformed(evt);
            }
        });

        jButtonReadRecognizeData.setText("Wczytaj");
        jButtonReadRecognizeData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReadRecognizeDataActionPerformed(evt);
            }
        });

        jLabel2.setText("Ilośc poprawnych:");

        jLabel7.setText("Ilość błędnych: ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonTestAll)
                            .addComponent(jLabel10)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(32, 32, 32)
                                .addComponent(jLabelResultOk))
                            .addComponent(jButtonTestOne))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonClean))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(48, 48, 48)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelResultErr)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonReadRecognizeData)
                        .addGap(7, 7, 7)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonTestAll)
                    .addComponent(jButtonTestOne)
                    .addComponent(jButtonClean)
                    .addComponent(jButtonReadRecognizeData))
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel2)
                    .addComponent(jLabelResultOk)
                    .addComponent(jLabel7)
                    .addComponent(jLabelResultErr))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Testuj", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initLogic() {
        signTrain = new SignDAO();
        signRecognize = new SignDAO();
        myNeuralNetwork = new MyNeuralNetwork();         
        resultsModel = setTableResultModel();
        recognizeDataModel = setTableDataModel();
    } 
    
    private DefaultTableModel setTableDataModel() {
       DefaultTableModel model =  new DefaultTableModel();
       model.addColumn("Id");
       model.addColumn("Zdjęcie");
       model.addColumn("Kategoria");
       
       return model;
    }
    
    private DefaultTableModel setTableResultModel() {
        DefaultTableModel model =  new DefaultTableModel();
        model.addColumn("Id");
        model.addColumn(Dictionary.NE);
        model.addColumn(Dictionary.RC);
        model.addColumn(Dictionary.SL30);
        model.addColumn(Dictionary.SL50);
        model.addColumn(Dictionary.SL60);
        model.addColumn(Dictionary.SL70);
        model.addColumn(Dictionary.SL80);
        model.addColumn(Dictionary.SL90);
        model.addColumn(Dictionary.SL100);
        model.addColumn(Dictionary.SL110);
        model.addColumn(Dictionary.SL120);
        model.addColumn(Dictionary.STP);
        model.addColumn(Dictionary.WAR);
        model.addColumn(Dictionary.YLD);
        model.addColumn(Dictionary.ERR);
        
        return model;
    }
    
    private void jButtonTestAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTestAllActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonTestAllActionPerformed

    private String roundNumber(double input, String pattern) {
        DecimalFormat myFormatter = new DecimalFormat(pattern);
        return myFormatter.format(input);
    }
    
    private void showTestResults(List<double[]> results) {

        columnMax = new int[results.size()];
        for(int i = 0; i < results.size(); i++) {
            columnMax[i] = getMaxCol(results.get(i)) + 1;
        }
        for(int i = 0; i < results.size(); i++) {
                resultsModel.addRow(new Object[]{(i+1),roundNumber(results.get(i)[0], "#.##"),
                    roundNumber(results.get(i)[1], "#.##"), roundNumber(results.get(i)[2], "#.##"),
                roundNumber(results.get(i)[3], "#.##"), roundNumber(results.get(i)[4], "#.##"),
                roundNumber(results.get(i)[5], "#.##"), roundNumber(results.get(i)[6], "#.##"),
                roundNumber(results.get(i)[7], "#.##"), roundNumber(results.get(i)[8], "#.##"),
                roundNumber(results.get(i)[9], "#.##"), roundNumber(results.get(i)[10], "#.##"),
                roundNumber(results.get(i)[11], "#.##"), roundNumber(results.get(i)[12], "#.##"),
                roundNumber(results.get(i)[13], "#.##"), roundNumber(results.get(i)[14], "#.##")});
            }
    }
    
    private int getMaxCol(double[] input) {
        int colMax = 0;
        if(input.length > 0) {
            double max = input[0];
            for(int i = 0; i < input.length; i++) {
                if(max < input[i]) {
                    max = input[i];
                    colMax = i;
                }
            }
        }
        return colMax;
    }
    
    private void showSummary() {
        int ok = 0;
        int err = 0;
        if(desiredColumn.length == columnMax.length) {
            for(int i = 0; i < desiredColumn.length; i++) {
                if(desiredColumn[i] + 1 == columnMax[i]) {
                    ok++;
                } else {
                    err++;
                }
            }
        }
        this.jLabelResultOk.setText(Integer.toString(ok));
        this.jLabelResultErr.setText(Integer.toString(err));
    }
    
    private void jButtonTestAllMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonTestAllMouseClicked
        List<double[]> results;
        NeuralNetwork testNeuralNetwork;
        try {
            testNeuralNetwork = MyNeuralNetwork.getNeuralNetwork();
            results = MyNeuralNetwork.test(MyNeuralNetwork.getNeuralNetwork(), myNeuralNetwork.createTrainingSet(signRecognize));
            showTestResults(results);
            showSummary();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(JFrameForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonTestAllMouseClicked

    private void jButtonTestOneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonTestOneMouseClicked
        int selectedRow = jTableData.getSelectedRow();
        if(selectedRow > -1) {
            SignDAO signDAO = new SignDAO(signRecognize.getSignList().get(selectedRow));
            List<double[]> results;
            NeuralNetwork testNeuralNetwork;
            try {
                testNeuralNetwork = MyNeuralNetwork.getNeuralNetwork();
                results = MyNeuralNetwork.test(MyNeuralNetwork.getNeuralNetwork(), myNeuralNetwork.createTrainingSet(signDAO));
                showTestResults(results);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(JFrameForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButtonTestOneMouseClicked

    private void jButtonCleanMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonCleanMouseClicked
        resultsModel.setRowCount(0);
        recognizeDataModel.setRowCount(0);
        signRecognize = new SignDAO();
        desiredColumn = new int[0];
        columnMax = new int[0];
        this.jLabelResultOk.setText("");
        this.jLabelResultErr.setText("");
    }//GEN-LAST:event_jButtonCleanMouseClicked

    private void jButtonReadDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReadDataActionPerformed
        jLabelInfo.setText("");
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setMultiSelectionEnabled(true);
        chooser.setDialogTitle("Wybór plików");
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setFileFilter(new FileNameExtensionFilter("bmp", "bmp"));

        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
          File[] files = chooser.getSelectedFiles();
          try {
          signTrain.addFileToList(files);
          jLabelInfo.setText("Dane uczące wczytano z powodzeniem");
          } catch(IOException ex) {
              Logger.getLogger(JFrameForm.class.getName()).log(Level.SEVERE, null, ex);
              JOptionPane.showMessageDialog(null,"Wystąpił błąd podczas przetwarzania plików","Błąd",JOptionPane.WARNING_MESSAGE);
          }
        } 
    }//GEN-LAST:event_jButtonReadDataActionPerformed

    private void jButtonReadDataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonReadDataMouseClicked
        
    }//GEN-LAST:event_jButtonReadDataMouseClicked

    private void jButtonReadRecognizeDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReadRecognizeDataActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setMultiSelectionEnabled(true);
        chooser.setDialogTitle("Wybór plików");
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setFileFilter(new FileNameExtensionFilter("bmp", "bmp"));

        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
          File[] files = chooser.getSelectedFiles();
          try {
          signRecognize.addFileToList(files);
          } catch(IOException ex) {
              Logger.getLogger(JFrameForm.class.getName()).log(Level.SEVERE, null, ex);
              JOptionPane.showMessageDialog(null,"Wystąpił błąd podczas przetwarzania plików","Błąd",JOptionPane.WARNING_MESSAGE);
          }
        } 
        recognizeDataModel.setRowCount(0);
        List<Sign> listSign = signRecognize.getSignList();
        desiredColumn = new int[listSign.size()];
           for(int i = 0; i < listSign.size(); i++) {
            recognizeDataModel.addRow(new Object[]{(i+1), new ImageIcon(listSign.get(i).getImage()),
                listSign.get(i).getCategoryName()});
            desiredColumn[i] = getDesiredColumnNumber(listSign.get(i).getCategoryName());
        }
    }//GEN-LAST:event_jButtonReadRecognizeDataActionPerformed

    private int getDesiredColumnNumber(String input) {
        switch(input) {
        case Dictionary.NE: return 0;
            case Dictionary.RC: return 1;
            case Dictionary.SL30: return 2;
            case Dictionary.SL50: return 3;
            case Dictionary.SL60: return 4;
            case Dictionary.SL70: return 5;
            case Dictionary.SL80: return 6;
            case Dictionary.SL90: return 7;
            case Dictionary.SL100: return 8;
            case Dictionary.SL110: return 9;
            case Dictionary.SL120: return 10;
            case Dictionary.STP: return 11;
            case Dictionary.WAR: return 12;
            case Dictionary.YLD: return 13;
            default: return 14;
        }
    }
        
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(signTrain.getSignList().size() > 0) {
            jLabelInfo.setText("");
            double learningRate = (double)(jSpinnerLearningRate.getValue());
            double error = (double)(jSpinnerError.getValue());
            int maxIteration = (int) (jSpinnerIteration.getValue());
            jLabelInfo.setText("Trwa uczenie sieci neuronowej");
            myNeuralNetwork.train(signTrain,learningRate,maxIteration,error);
            jLabelInfo.setText("Uczenie sieci zakończone powodzeniem");
        } else {
            jLabelInfo.setText("Brak danych uczących");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButtonTestOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTestOneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonTestOneActionPerformed

    private void jButtonCleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCleanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonCleanActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrameForm().setVisible(true);
            }
        });
    }

    //Logic variables declaration
    private SignDAO signTrain;
    private SignDAO signRecognize;
    private MyNeuralNetwork myNeuralNetwork;
    private DefaultTableModel resultsModel;
    private DefaultTableModel recognizeDataModel;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButtonClean;
    private javax.swing.JButton jButtonReadData;
    private javax.swing.JButton jButtonReadRecognizeData;
    private javax.swing.JButton jButtonTestAll;
    private javax.swing.JButton jButtonTestOne;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabelInfo;
    private javax.swing.JLabel jLabelResultErr;
    private javax.swing.JLabel jLabelResultOk;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSpinner jSpinnerError;
    private javax.swing.JSpinner jSpinnerIteration;
    private javax.swing.JSpinner jSpinnerLearningRate;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableData;
    private javax.swing.JTable jTableResults;
    // End of variables declaration//GEN-END:variables
}
